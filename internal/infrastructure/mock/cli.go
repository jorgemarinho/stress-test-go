// Code generated by mockery v2.43.0. DO NOT EDIT.

package mock

import mock "github.com/stretchr/testify/mock"

// CLI is an autogenerated mock type for the CLI type
type CLI struct {
	mock.Mock
}

type CLI_Expecter struct {
	mock *mock.Mock
}

func (_m *CLI) EXPECT() *CLI_Expecter {
	return &CLI_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields:
func (_m *CLI) Execute() {
	_m.Called()
}

// CLI_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type CLI_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *CLI_Expecter) Execute() *CLI_Execute_Call {
	return &CLI_Execute_Call{Call: _e.mock.On("Execute")}
}

func (_c *CLI_Execute_Call) Run(run func()) *CLI_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CLI_Execute_Call) Return() *CLI_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *CLI_Execute_Call) RunAndReturn(run func()) *CLI_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewCLI creates a new instance of CLI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCLI(t interface {
	mock.TestingT
	Cleanup(func())
}) *CLI {
	mock := &CLI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
